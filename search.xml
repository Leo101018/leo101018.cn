<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows下mysql手动安装方式</title>
      <link href="/2022/10/05/Windows%E4%B8%8Bmysql%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/10/05/Windows%E4%B8%8Bmysql%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows环境下mysql手动方式安装"><a href="#Windows环境下mysql手动方式安装" class="headerlink" title="Windows环境下mysql手动方式安装"></a>Windows环境下mysql手动方式安装</h1><p><a href="https://mirrors.huaweicloud.com/mysql/Downloads/MySQL-6.0/">https://mirrors.huaweicloud.com/mysql/Downloads/MySQL-6.0/</a></p><p>下载地址</p><img src="/2022/10/05/Windows%E4%B8%8Bmysql%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/Image.png" class="" title="Image"><p>32位或者64位均可</p><img src="/2022/10/05/Windows%E4%B8%8Bmysql%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/Image-1664900250792-2.png" class="" title="Image"><p>解压放在一个非中文目录下</p><img src="/2022/10/05/Windows%E4%B8%8Bmysql%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/Image-1664900274221-4.png" class="" title="Image"><p>配置环境变量。</p><p>将配置文件复制到目录中，并且名称必须是my.ini，否则就需要通过参数指定配置文件了。</p><img src="/2022/10/05/Windows%E4%B8%8Bmysql%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/Image-1664900317498-6.png" class="" title="Image"><p>my.ini文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=gbk</span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line">basedir=&quot;C:/App/mysql-6.0.11-alpha-win32&quot;</span><br><span class="line">datadir=&quot;C:/App/mysql-6.0.11-alpha-win32/data&quot;</span><br><span class="line">default-character-set=gbk</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span><br><span class="line">max_connections=800</span><br><span class="line">query_cache_size=84M</span><br><span class="line">table_cache=1520</span><br><span class="line">tmp_table_size=30M</span><br><span class="line">thread_cache_size=38</span><br><span class="line">myisam_max_sort_file_size=100G</span><br><span class="line">myisam_sort_buffer_size=30M</span><br><span class="line">key_buffer_size=129M</span><br><span class="line">read_buffer_size=64K</span><br><span class="line">read_rnd_buffer_size=256K</span><br><span class="line">sort_buffer_size=256K</span><br><span class="line">innodb_additional_mem_pool_size=6M</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">innodb_log_buffer_size=3M</span><br><span class="line">innodb_buffer_pool_size=250M</span><br><span class="line">innodb_log_file_size=50M</span><br><span class="line">innodb_thread_concurrency=10</span><br></pre></td></tr></table></figure><p>注意，该配置文件是从图形界面方式安装的mysql之后，从其my.ini配置文件中提取出来的内容。</p><p>之后，可以将mysql安装为Windows服务</p><p>PS C:\Users\Administrator&gt; mysqld –install MySQL –defaults-file&#x3D;”C:\App\mysql-6.0.11-alpha-win32\my.ini”</p><p>Service successfully installed.</p><p>PS C:\Users\Administrator&gt;</p><p>之后，就可以在services.msc中看到MySQL这个名字的Windows服务了。</p><p>这里要注意，上面mysqld命令的参数顺序，不要颠倒了，否则不生效。</p><p>PS C:\Users\Administrator&gt; mysqld –defaults-file&#x3D;”C:\App\mysql-6.0.11-alpha-win32\my.ini” –install MySQL</p><p>PS C:\Users\Administrator&gt;</p><p>这样就不行。</p><p>如果想要安装的Windows服务，不是自动启动的，可以–install-manual参数。</p><p>如果不想安装为Windows服务，想要直接在命令行下运行，并且看到实时输出，可以如下：</p><p>mysqld –defaults-file&#x3D;”C:\App\mysql-6.0.11-alpha-win32\my.ini” –console 即可。</p><p>删除MySQL服务</p><p>mysqld –remove MySQL即可。</p><hr>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-标识符、常量（字面量）、变量和数据类型、运算符</title>
      <link href="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="04-标识符、常量（字面量）、变量和数据类型、运算符"><a href="#04-标识符、常量（字面量）、变量和数据类型、运算符" class="headerlink" title="04-标识符、常量（字面量）、变量和数据类型、运算符"></a>04-标识符、常量（字面量）、变量和数据类型、运算符</h1><h2 id="Java程序结构"><a href="#Java程序结构" class="headerlink" title="Java程序结构"></a>Java程序结构</h2><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004214518848.png" class="" title="image-20221004214518848"><p>其中数据类型确定要存储在内存中的数据的类型；变量是存储数据的基本单元；运算符是一个符号，用于操作一个或多个参数以得出结果；程序是按顺序执行的，控制流语句允许改变此顺序。</p><h2 id="标识符、关键字和保留字"><a href="#标识符、关键字和保留字" class="headerlink" title="标识符、关键字和保留字"></a>标识符、关键字和保留字</h2><p>在Java语言中，通过标识符来表示一些元素的名字，比如变量名、类名、方法名和包名等。Java中的标识符要符合下面的规则：</p><ol><li>标识符必须以字母、下划线（_）、数字或美元（$）组成；</li><li>标识符必须由字母、下划线（_）或美元（$）开头，不能由数字开头；</li><li>标识符不能是关键字或者保留字；</li><li>标识符中不能有空格;</li><li>标识符没有长度限制。</li></ol><p>例如，A_123，$abc，length都是合法的标识符，而1a，s+g就是非法的标识符，各种不同的元素命名规则如下图</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004214805746.png" class="" title="image-20221004214805746"><p>提示：</p><ol><li>Java区分大小写，因此area和Area是两个不同的标识符；</li><li>为提高程序的可读性，建议使用有意义的命名标识符，如area，length等。</li></ol><p>命名规范： 软性建议<br>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。<br>方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。<br>变量名规范：全部小写。</p><p> <strong>关键字和保留字</strong><br>下表是Java中的关键字和保留字，关键字是对Java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等；保留字是为Java预留的关键字，虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字，关键字和保留字如下表所示。</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004215024906.png" class="" title="image-20221004215024906"><h2 id="常量（字面量）"><a href="#常量（字面量）" class="headerlink" title="常量（字面量）"></a>常量（字面量）</h2><p><strong>常量（字面量）：也叫做字面量</strong>，我们可以直观看到的值，是指在Java程序中固定不变的数据。</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004215140584.png" class="" title="image-20221004215140584"><h2 id="常量（使用final声明的常变量）"><a href="#常量（使用final声明的常变量）" class="headerlink" title="常量（使用final声明的常变量）"></a>常量（使用final声明的常变量）</h2><p>常量<br>在程序中往往会存在变量值不需要变化的情况，比如表示圆周率的变量，比如表示黄金分割点的变量，那么<strong>这些值不变的变量就叫常量</strong>。<br>在Java中，<strong>常量用关键字final来表示（在后面章节会详细讲解）</strong>，它也是有数据类型的，语法如下：<br><strong>final数据类型 常量名 &#x3D; 初始值;</strong><br>提示：</p><ol><li><p><strong>常量在声明的时候必须初始化；</strong></p></li><li><p><strong>常量在初始化后值不能再更改，否则会引起错误。</strong><br> 例如：<br> final double PI &#x3D; 3.14;</p></li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量（variable）是用来存储数据的一块存储区域，在程序运行中它的值可以发生变化。变量可以存放一种数据类型的值，Java程序在运行加载时会根据变量的不同数据类型来分配不同的内存空间，变量的数据类型在声明时指定。<br>变量是指在程序的运行过程中随时可以发生变化的量，作用是：<br>1．变量是程序中数据的临时存放场所<br>2．保存程序运行时用户输入的数据<br>3．特定的运算结果等</p><p><strong>变量的声明</strong><br>一个变量只有在声明后才有效，声明的作用就是确定该变量要存储的数据类型。声明变量的语法格式如下：<br>数据类型 变量名;<br>如果要同时声明多个相同数据类型的变量，可以如下写：<br>数据类型 变量名1,变量名2;<br>代码举例如下：<br>int number, max;</p><p>注意，变量必须要先声明，后使用。</p><p><strong>在局部作用域（例如函数体内）内声明的变量必须进行初始化才能够使用，否则就是一个随机值，不能够直接使用，编译会提示未初始化的变量错误。</strong></p><p>变量在声明后，不能直接访问，只有被赋值的变量才能够被访问，否则就会出现运行错误。</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004215515107.png" class="" title="image-20221004215515107"><p><strong>局部变量必须进行初始化。</strong></p><p><strong>变量的赋值</strong><br><strong>第一次给变量赋值叫”初始化”。</strong>使用等号”&#x3D;”来进行赋值，语法如下：<br>变量名 &#x3D; 数据值;<br>例如：<br>int number;<br>number &#x3D; 1000;<br>也可以把变量的声明和初始化合用一个语句实现出来，例如上面两行代码就可以改写成一行代码：<br>int number &#x3D; 1000;<br>每个已经声明了数据类型的存储变量只能存储对应类型的数据。如下代码是正确的：<br>int ii &#x3D; 100;<br>double pi &#x3D; 3.14;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VariableDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String args[])</span> &#123;</span><br><span class="line">        <span class="type">double</span> salary; <span class="comment">//声明变量</span></span><br><span class="line">        salary = <span class="number">1500.00</span>; <span class="comment">//变量赋初值</span></span><br><span class="line">        System.out.println(salary); <span class="comment">//变量的访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004220048802.png" class="" title="image-20221004220048802"><p>注意，Java中的变量如图，就是这个内存区域中存储的是5，这个内存区域就是变量a，不同于Python中的变量是一种指向的关系。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>在Java中，数据类型分为两大类：<br><strong>基本数据类型：8种基本数据类型</strong><br>● 字符型<br>● 布尔型<br>● 数值型<br>  ○ 整型<br>  ○ 浮点型<br><strong>引用数据类型：存储地址的引用</strong><br>● 类<br>● 接口<br>● 数组</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004220409808.png" class="" title="image-20221004220409808"><p>有的说法，java的数据类型中的复合数据类型，实际上就是引用数据类型，就是类，接口，数组，这些。</p><p>Java的数据类型分为两大类：<br>基本数据类型：包括 整数 、 浮点数 、 字符 、 布尔 。<br>引用数据类型：包括 类 、 数组 、 接口 。</p><p>基本数据类型：</p><p>　　整数型 byte short int long<br>　　浮点型 float double<br>　　字符型 char<br>　　布尔型 boolean</p><p>引用数据类型：</p><p>　　字符串、数组、类、接口、Lambda</p><p>注意事项：<br>\1. <strong>字符串不是基本类型，而是引用类型。</strong><br>\2. <strong>浮点型可能只是一个近似值，并非精确的值。</strong><br>\3. <strong>数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节。</strong><br>\4. <strong>浮点数当中默认类型是double。如果一定要使用float类型，需要加上一个后缀F。</strong><br>　<strong>如果是整数，默认为int类型，如果一定要使用long类型，需要加上一个后缀L。推荐使用大写字母后缀。</strong></p><p>每个数据类型都有取值范围，编译器会对每种数据类型分配相应大小的存储空间。下面我们来详细介绍一下这8种基本数据类型。</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004220730005.png" class="" title="image-20221004220730005"><p><strong>Java中的默认类型：整数类型是 int ，声明long型后面需加上l或者L，否则会出错。浮点类型数据默认是 double 。</strong></p><h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3><table><thead><tr><th>byte</th><th>字节型</th><th>1个字节（8位二进制）</th><th>-128 到 127</th></tr></thead></table><table><thead><tr><th>short</th><th align="left">短整型</th><th>2个字节（16位二进制）</th><th>-2^15 到 2^15-1</th></tr></thead></table><table><thead><tr><th>int</th><th>整型</th><th>4个字节（32位二进制）</th><th>-2^31到 2^31-1</th></tr></thead></table><table><thead><tr><th>long</th><th>长整型</th><th>8个字节（64位二进制）</th><th>-2^63到 2^63-1</th></tr></thead></table><p><strong>Java中整型的四种表示形式</strong><br>十进制整数：0 ~ 9，注：第一位不能是0</p><p>十六进制数：0 ~ 9 A ~ F, 注：必须以0x或0X开头<br>例如： 0X8A 0x12</p><p>八进制整数：0 ~ 7，注：必须以0开头<br>例如： 0123 012</p><p>二进制整数：0~1，注：必须以0B开头（在java1.7及以上版本可用）<br>例如： 0B1010</p><p>例 在java中与语句int a &#x3D; 97;等效的声明语句是_____<br>A.int a &#x3D; 0X0061;<br>B.int a &#x3D; 0X61;<br>C.int a &#x3D; 0141;<br>D.int a &#x3D; 97.0;<br>答案：ABC</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>与整数类型相似，Java浮点数类型有固定的表示范围和字段长度，不受平台影响，浮点数据类型</p><table><thead><tr><th><strong>类型</strong></th><th><strong>说明</strong></th><th><strong>占空间大小</strong></th><th><strong>值域</strong></th></tr></thead><tbody><tr><td>float</td><td>单精度浮点型</td><td>4个字节，精度约7位</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>double</td><td>双精度浮点型</td><td>8个字节，精度约为17位</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><p>Java浮点数类型有两种表示形式，分别是十进制形式和科学计数法形式，具体表示方式如下：</p><p>十进制数形式，例如：3.14 314.0 .314</p><p>科学计数法形式，如：3.14e2 3.14E-1</p><p><strong>Java浮点型常量默认为double型，如要声明一个常量为float型，则需在数字后面加f或F，</strong>如:<br>double d &#x3D; 12345.6<br><strong>float f &#x3D; 12.3F</strong></p><p><strong>提示：</strong></p><ol><li><strong>带小数的数据默认是double型而非float型的；</strong></li><li>定义float型数据需要后面紧跟”f”或”F”来表示，比如float f &#x3D; 2.1f；</li><li>定义长整型数据，可以后面紧跟”l”或”L”来表示。</li></ol><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>字符数据类型用于<strong>存放单个字符，每个字符占用2个字节（16位二进制）的内存空间</strong>。一个字符型数据由单引号括起来，使用”char”关键字来说明数据类型，语法如下：</p><p>char letter &#x3D; ‘a’;</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004221957987.png" class="" title="image-20221004221957987"><p>字符类型是一个16位无符号整数，Java中字符类型的值是对应字符的编码, 是unicode编码，其中，英文部分的值与ascII编码一致。char是定长编码, 所有的字符都是16位。例如：</p><p>‘A’ 对应的编码是0x0041</p><p>‘中’对用的编码是 0x4e2d</p><p>char类型在编码中: ‘0’<del>‘9’, ‘a’</del>‘z’, ‘A’~’Z’都是连续编码的，’0’与’\u0000’不是同一个字符，字符编码的最小值为0, 最大值是65535 ，也就是2^16-1，使用时要注意字符字面量使用单引号为定界符号。</p><p><strong>提示：</strong></p><ol><li>字符型只表示一个字符，不能表示多个字符，比如’abc’是错的；</li><li>字符型只能用单引号（’）括起来，用双引号（”）括起来的不是字符，而是字符串（String），比如”a”表示的不是char型字符而是String型字符串。</li></ol><p>Java还允许使用转义字符来表示特殊字符。转义字符用斜杠”\“打头，后面跟一个字符。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>转义字符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>退格键</td><td>\b</td><td>表示一次退格</td></tr><tr><td>Tab键</td><td>\t</td><td>表示一个Tab空格</td></tr><tr><td>换行符</td><td>\n</td><td>表示换行</td></tr><tr><td>回车键</td><td>\r</td><td>表示回车</td></tr><tr><td>斜杠</td><td>\\</td><td>表示斜杠</td></tr><tr><td>单引号</td><td>\‘</td><td>表示单引号</td></tr><tr><td>双引号</td><td>\“</td><td>表示双引号</td></tr></tbody></table><p>转义字符用在一些特殊字符的表示上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EscapeCharDemo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;escape\bchar&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;escape\tchar&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;escape\rchar&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;escape\nchar&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\\我在斜线里\\&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\&#x27;我在单引号里\&#x27;&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;我没有单引号&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\&quot;我在双引号里\&quot;&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;我没有双引号&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004222512443.png" class="" title="image-20221004222512443"><p><strong>其中\b, \r，在java命令行中能够看到效果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;escape\bchar&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;escape\tchar&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;escape\rchar&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;escape\nchar&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004222613069.png" class="" title="image-20221004222613069"><p><strong>ASCII码表</strong></p><p>对于字符来说，存储的时候，会转为对应的ascII码来进行存储的。<br>因此，字符在计算机中的表示都是以整数来进行表示的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//字符类型变量</span></span><br><span class="line">  <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//字符类型和int类型计算</span></span><br><span class="line">  System.out.println(c+i);<span class="comment">//输出结果是98</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ASCII（ American Standard Code for Information Interchange 美国标准信息交换码）。</strong></p><p>在char类型和int类型计算的过程中，char类型的字符先查询编码表，得到97，再和1求和，结果为98。</p><p>实际就是char类型提升为了int类型（自动类型转换）。char类型内存2个字节，int类型内存4个字节。</p><p><strong>ASCII码表</strong></p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004234949377.png" class="" title="image-20221004234949377"><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004235010409.png" class="" title="image-20221004235010409"><p>java中1.3这种认为是double类型的，因此，1.3f这样表示1.3是float类型的。<br>c中非0即为真，因此可以while（1）这样，但是java中不行，java只能while（true）这样。</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔数据类型由关键字boolean来表示，<strong>布尔型数据的值域只有两个值：true和false</strong>。例如，下面两行代码：</p><p>boolean isOK &#x3D; true;</p><p>boolean isFirst &#x3D; false;</p><p><strong>提示：</strong></p><ol><li><strong>true和false都是小写，True、TRUE、False、FALSE都不是布尔型数据的值</strong>；</li><li><strong>布尔型数据不能用数字0和1来表示真假，只能用true和false；</strong></li><li><strong>布尔型数据默认值是false。</strong></li></ol><p><strong>例2.5 布尔数据类型</strong></p><p>boolean flag;</p><p>flag &#x3D; true;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Variable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//定义字节型变量</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">//定义短整型变量</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//定义整型变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">123456</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//定义长整型变量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">12345678900L</span>;</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        <span class="comment">//定义单精度浮点型变量</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5.5F</span>;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        <span class="comment">//定义双精度浮点型变量</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">8.5</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        <span class="comment">//定义布尔型变量</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bool</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.println(bool);</span><br><span class="line">        <span class="comment">//定义字符型变量</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>long类型：建议数据后加L表示。<br>ﬂoat类型：建议数据后加F表示。</p><p>注意事项：</p><p>变量名称：在同一个大括号范围内，变量的名字不可以相同。否者会报重复定义的错误。<br>变量赋值：定义的变量，不赋值不能使用。</p><p>变量要先定义后使用。</p><p>每条语句最后要加分号;否则语法错误。</p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>Java是强类型语言，要求赋值或传递时数据类型必须匹配，我们可以利用Java提供的数据类型的转换来消除这种错误。</p><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。</p><p><strong>Java提供了两种数据类型的转换方式：自动转换和强制转换</strong></p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004223055828.png" class="" title="image-20221004223055828"><h3 id="自动数据类型转换"><a href="#自动数据类型转换" class="headerlink" title="自动数据类型转换"></a>自动数据类型转换</h3><p>自动数据类型转换也称之为隐式类型转换，我们在数值数据类型中了解到，不同类型的数据会占用不同大小的存储空间，那么<strong>数据类型自</strong></p><p><strong>动转换的原则就是</strong>：<strong>小空间的数据类型可以自动转换成大空间的数据类型</strong>，<strong>也就是说低精度的数据可以升级成高精度的数据</strong>，反之不行，</p><p>我们可以理解成高精度的数据转换成低精度的数据会失去数据的精度，所以不能这样转换。数据类型的自动转换顺序如下图</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004223327366.png" class="" title="image-20221004223327366"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// byte x = b + i; // 报错</span></span><br><span class="line">    <span class="comment">//int类型和byte类型运算，结果是int类型</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> b + i;</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运算结果，变量的类型将是 int 类型，这就是出现了数据类型的自动类型转换现象。</p><p>byte 类型内存占有1个字节，在和 int 类型运算时会提升为 int 类型 ，自动补充3个字节，因此计算后的结果还是 int 类型。</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004233905882.png" class="" title="image-20221004233905882"><p>同理，当一个 int 类型变量和一个 double 变量运算时， int 类型将会自动提升为 double 类型进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">2.5</span>;</span><br><span class="line">    <span class="comment">//int类型和double类型运算，结果是double类型</span></span><br><span class="line">    <span class="comment">//int类型会提升为double类型</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">e</span> <span class="operator">=</span> d+i;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换规则：</p><p>范围小的类型向范围大的类型提升， byte、short、char 运算时直接提升为 int 。</p><p>byte、short、char‐‐&gt;int‐‐&gt;long‐‐&gt;float‐‐&gt;double</p><h3 id="强制数据类型转换"><a href="#强制数据类型转换" class="headerlink" title="强制数据类型转换"></a>强制数据类型转换</h3><p>将 1.5 赋值到 int 类型变量会发生什么？产生编译失败，肯定无法赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1.5</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>double 类型内存8个字节， int 类型内存4个字节。 1.5 是 double 类型，取值范围大于 int 。</p><p>想要赋值成功，只有通过强制类型转换，将 double 类型强制转换成 int 类型才能赋值。</p><p>自动转换是Java自动执行的，而强制转换需要我们自己手动执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// double类型数据强制转成int类型，直接去掉小数点。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1.5</span>;</span><br></pre></td></tr></table></figure><p>强制数据类型转换也称之为显式类型转换，既然有些数据类型不能互相自动进行转换，那么Java提供了强制转换的方法，强制转换的语法就是用圆括号括起你要转换成的目的数据类型：</p><p>变量&#x3D;（目标类型）值;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">a = (<span class="type">byte</span>) b;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">2.8</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> (<span class="type">float</span>)<span class="number">5.2</span>;</span><br></pre></td></tr></table></figure><p>当一个 short 类型与 1 相加，我们知道会类型提升，但是还想给结果赋值给short类型变量，就需要强制转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">//short类型变量，内存中2个字节</span></span><br><span class="line">     <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">       出现编译失败</span></span><br><span class="line"><span class="comment">       s和1做运算的时候，1是int类型，s会被提升为int类型</span></span><br><span class="line"><span class="comment">       s+1后的结果是int类型，将结果在赋值会short类型时发生错误</span></span><br><span class="line"><span class="comment">       short内存2个字节，int类型4个字节</span></span><br><span class="line"><span class="comment">       必须将int强制转成short才能完成赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     s = s + <span class="number">1</span>；<span class="comment">//编译失败</span></span><br><span class="line">     s = (<span class="type">short</span>)(s+<span class="number">1</span>);<span class="comment">//编译成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004234246121.png" class="" title="image-20221004234246121"><p><strong>注意：</strong></p><p>　　浮点转成整数，直接取消小数点，可能造成数据损失精度。<br>　　int 强制转成 short 砍掉2个字节，可能造成数据丢失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义s为short范围内最大值</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">32767</span>;</span><br><span class="line"><span class="comment">// 运算后，强制转换，砍掉2个字节后会出现不确定的结果</span></span><br><span class="line">s = (<span class="type">short</span>)(s + <span class="number">10</span>);</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004234426297.png" class="" title="image-20221004234426297"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> b;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line">b = b*<span class="number">3</span>;java会自动做类型提升，将b自动提升为<span class="type">int</span>，因此，会发生错误。</span><br><span class="line">b = （<span class="type">byte</span>）b*<span class="number">3</span>;这样，但是还是报错，因为强制类型转换比乘法优先级高。</span><br><span class="line">b = （<span class="type">byte</span>）（b*<span class="number">3</span>）;应该这样。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestConvert</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span> &#123;</span><br><span class="line">    <span class="comment">/*自动类型转换*/</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">45</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> (i1 + i2) * <span class="number">1.0</span>;<span class="comment">//系统将转换为double型运算</span></span><br><span class="line">    System.out.println(d1);</span><br><span class="line">    <span class="comment">/*自动类型转换*/</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="number">12.3f</span>;<span class="comment">//必须加f</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">12300</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="number">300000000000L</span>;<span class="comment">//必须加l</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> l1 + l2 + f3;<span class="comment">//系统将转换为float型计算</span></span><br><span class="line">    System.out.println(f);</span><br><span class="line">    <span class="type">byte</span> m1=<span class="number">1</span>;</span><br><span class="line">    <span class="type">byte</span> m2=<span class="number">3</span>;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">m</span> <span class="operator">=</span> (<span class="type">byte</span>)(m1+m2);<span class="comment">//byte类型参与运算会自动转换为int类型，然后再进行运算，结果为int，因此，需要强转为byte赋值</span></span><br><span class="line">    <span class="comment">/*强制类型转换*/</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> (<span class="type">long</span>)f;<span class="comment">//强制转换会舍去小数部分（不是四舍五入）</span></span><br><span class="line">    System.out.println(l);</span><br><span class="line">    <span class="comment">/*强制类型转换*/</span></span><br><span class="line">    <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">67</span>;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">89</span>;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> (<span class="type">byte</span>)(b1 + b2);<span class="comment">//系统将转换为int型运算，需要强制转换符</span></span><br><span class="line">    System.out.println(b3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004225305700.png" class="" title="image-20221004225305700"><p>67+89&#x3D;156</p><p>156-127&#x3D;28</p><p>byte范围是-128~127，因此，当超过了范围之后就会溢出，然后又会从最小的开始了。因此，128就是-128,129就是-127，以此类推，156就是-100。</p><p><strong>提示：</strong></p><ol><li><strong>boolean型数据不能和其他基本数据类型进行转换；</strong></li><li><strong>char型和int型数据可以互换；</strong></li><li><strong>byte、short、char之间不会相互转换，它们三者在计算时首先会转换为int类型；</strong></li><li>在强制类型转换过程中，源类型的值可能大于目标类型，因此可能造成精度降低或溢出，使用时需注意。</li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符和表达式"><a href="#算术运算符和表达式" class="headerlink" title="算术运算符和表达式"></a>算术运算符和表达式</h3><p>算术运算是一种常见的运算，主要是对数值型数据进行加减乘除等运算</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>名称</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>+</td><td>加运算符</td><td></td></tr><tr><td>-</td><td>减运算符</td><td></td></tr><tr><td>*</td><td>乘运算符</td><td></td></tr><tr><td>&#x2F;</td><td>除运算符</td><td>若是两个整数相除，只保留整数部分</td></tr><tr><td>%</td><td>取模（取余）运算符</td><td><strong>被除数为正数结果都为正，被除数为负数结果都为负</strong></td></tr><tr><td>++</td><td>自增</td><td>++变量名：变量在参与其他操作前先将自己加1; 变量名++：先用原来的值参与其他操作后，再将自己加1</td></tr><tr><td>–</td><td>自减</td><td>算法同++</td></tr><tr><td>+</td><td>字符串连接</td><td>当操作数中只要有一个是String类型，系统会自动将另一个操作数转换成字符串类型，然后进行连接</td></tr></tbody></table><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004225941405.png" class="" title="image-20221004225941405"><p>被除数为正，结果为正。不看除数正负</p><p>被除数为负，结果为负。不看除数正负</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004225958659.png" class="" title="image-20221004225958659"><p>由于被除数是5.0，因此，2会自动类型转换为double，然后进行计算，因此，结果为double的。</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004230012172.png" class="" title="image-20221004230012172"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelfplusOperatorDemo1</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i++;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;, &quot;</span> + i);<span class="comment">// 0,1</span></span><br><span class="line">    a = ++i;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;, &quot;</span> + i);<span class="comment">// 2,2</span></span><br><span class="line">    i = i++;</span><br><span class="line">    System.out.println(i);<span class="comment">// 2</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    System.out.println(i++ % <span class="number">3</span>);<span class="comment">// 0</span></span><br><span class="line">    System.out.println(i++ % <span class="number">3</span>);<span class="comment">// 1</span></span><br><span class="line">    System.out.println(i++ % <span class="number">3</span>);<span class="comment">// 2</span></span><br><span class="line">    System.out.println(i++ % <span class="number">3</span>);<span class="comment">// 0</span></span><br><span class="line">    System.out.println(i++ % <span class="number">3</span>);<span class="comment">// 1</span></span><br><span class="line">    System.out.println(i++ % <span class="number">3</span>);<span class="comment">// 2</span></span><br><span class="line">    System.out.println(i++ % <span class="number">3</span>);<span class="comment">// 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004230310108.png" class="" title="image-20221004230310108"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelfplusOperatorDemo2</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="number">3</span>, y1 = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> <span class="number">3</span>, y2 = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> r1, r2;</span><br><span class="line">    r1 = x1++ + x1*y1;</span><br><span class="line">    r2 = ++x2 + x2*y2;</span><br><span class="line">    System.out.println(<span class="string">&quot;x1=&quot;</span>+x1+<span class="string">&quot; y1=&quot;</span>+y1+<span class="string">&quot; r1=&quot;</span>+r1);</span><br><span class="line">    System.out.println(<span class="string">&quot;x2=&quot;</span>+x2+<span class="string">&quot; y2=&quot;</span>+y2+<span class="string">&quot; r2=&quot;</span>+r2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004230544013.png" class="" title="image-20221004230544013"><p>注意，+运算符是左结合性，也就是从左向右运算的。</p><h3 id="字符串和运算符"><a href="#字符串和运算符" class="headerlink" title="字符串和运算符"></a>字符串和运算符</h3><p>字符串连接运算符使用”+”运算符，但此时与算术运算符中的加法运算符”+”的意义是不同的。字符串连接运算符，能够将多个字符串合并到一起生成一个新的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">2.15f</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5.7</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;c=&quot;</span> + c);</span><br><span class="line">    System.out.println(<span class="string">&quot;s=&quot;</span> + s);</span><br><span class="line">    System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">    System.out.println(<span class="string">&quot;f=&quot;</span> + f);</span><br><span class="line">    System.out.println(<span class="string">&quot;d=&quot;</span> + d);</span><br><span class="line">    System.out.println(<span class="string">&quot;b=&quot;</span> + b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004230716894.png" class="" title="image-20221004230716894"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> f=<span class="number">2.5f</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(i+f+c+s);</span><br><span class="line"></span><br><span class="line">System.out.println(i+f+s+c);</span><br><span class="line"></span><br><span class="line">System.out.println(c+s+i+f);</span><br><span class="line"></span><br><span class="line">System.out.println(c+s+(i+f));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004230949690.png" class="" title="image-20221004230949690"><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>名称</strong></th><th><strong>例子</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值运算符</td><td>i&#x3D;8</td><td>8赋值给i</td></tr><tr><td>+&#x3D;</td><td>加简捷赋值运算符</td><td>i+&#x3D;8</td><td>同i&#x3D;i+8</td></tr><tr><td>-&#x3D;</td><td>减简捷赋值运算符</td><td>i-&#x3D;8</td><td>同i&#x3D;i-8</td></tr><tr><td>*&#x3D;</td><td>乘简捷赋值运算符</td><td>i*&#x3D;8</td><td>同i&#x3D;i*8</td></tr><tr><td>&#x2F;&#x3D;</td><td>除简捷赋值运算符</td><td>i&#x2F;&#x3D;8</td><td>同i&#x3D;i&#x2F;8</td></tr><tr><td>%&#x3D;</td><td>取模简捷赋值运算符</td><td>i%&#x3D;8</td><td>同i&#x3D;i%8</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">i+=<span class="number">8</span>;<span class="comment">//18</span></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">i-=<span class="number">8</span>;<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">i*=<span class="number">8</span>;<span class="comment">//80</span></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">i/=<span class="number">8</span>;<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">i%=<span class="number">8</span>;<span class="comment">//2</span></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，在java中的基本数据类型的赋值而言是将变量值放到变量的内存单元中去，然后该内存单元命名为变量名。不同于python中的变量值与变量名绑定的含义。</strong></p><p><strong>python中变量值与变量名绑定，更像是java中的引用类型的变量值与变量名的关系，变量中存储的是引用类型值的内存地址或者叫做引用地址。</strong></p><h3 id="关系运算符和表达式"><a href="#关系运算符和表达式" class="headerlink" title="关系运算符和表达式"></a>关系运算符和表达式</h3><p><strong>关系运算又叫比较运算</strong>，用来对两个操作数进行大小、等于的关系比较，</p><table><thead><tr><th>运算符</th><th>名称</th><th>样例</th><th>结果说明</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>1&gt;2</td><td>false</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>1&gt;&#x3D;2</td><td>false</td></tr><tr><td>&lt;</td><td>小于</td><td>1&lt;2</td><td>true</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>1&lt;&#x3D;2</td><td>true</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td><td>1&#x3D;&#x3D;2</td><td>false</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>1!&#x3D;2</td><td>true</td></tr></tbody></table><p>比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值 true 或者 false 。</p><p>注意，比较运算符最终的运算结果为布尔值的。</p><p><strong>关系表达式用于进行关系比较，关系表达式的值都是布尔型的</strong>，例如下面代码：</p><p>int i &#x3D; 10;</p><p>int j &#x3D; 16;</p><p>boolean smalli &#x3D; i&lt;j;</p><p>boolean equal &#x3D; i&#x3D;&#x3D;j;</p><p>boolean bigi &#x3D; i&gt;j;</p><p><strong>提示：</strong></p><ol><li>关系表达式的结果都是布尔值，true或false；</li><li>比较相等的是双等号”&#x3D;&#x3D;”，不是一个等号”&#x3D;”，一个等号”&#x3D;”只能用来赋值。</li></ol><h3 id="逻辑运算符和表达式"><a href="#逻辑运算符和表达式" class="headerlink" title="逻辑运算符和表达式"></a>逻辑运算符和表达式</h3><p>逻辑运算又叫布尔运算，包括四个运算符，分别是&amp;&amp;、||、！和^，用来进行与、或、非和异或的逻辑运算。</p><p><strong>逻辑运算的操作数和结果都是布尔类型的值。</strong></p><table><thead><tr><th>符号</th><th><strong>运算符</strong></th><th><strong>名称</strong></th><th><strong>运算规则</strong></th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与运算符</td><td>逻辑与</td><td>运算符左右两端的操作数都为true，表达式结果才为true，其它情况表达式结果为false</td></tr><tr><td>| |</td><td>或运算符</td><td>逻辑或</td><td>运算符左右两端的操作数都为false，表达式结果才为false，其它情况表达式结果为true</td></tr><tr><td>!</td><td>非运算符</td><td>逻辑取反</td><td>操作数为true，结果为false；操作数为false，结果为true</td></tr><tr><td>^</td><td>异或运算符</td><td>逻辑异或</td><td>运算符左右两端的操作数，相同结果为false，不同结果为true</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">y</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(x&amp;&amp;y);<span class="comment">//false</span></span><br><span class="line">System.out.println(x||y);<span class="comment">//true</span></span><br><span class="line">System.out.println(!x);<span class="comment">//false</span></span><br><span class="line">System.out.println(x^y);<span class="comment">//亦或，相同为假，不同为真</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值 true 或者 false</strong></p><p>注意，在python中，运算结果不一定是ture或者false的。要看两边的内容，例如，11 || False，那么结果是11，不是布尔值的，因为，python中，非0的11表示了True。</p><p>而在java中，逻辑运算符两侧必须是布尔类型的值才行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">55</span>&gt;<span class="number">13</span> || <span class="literal">false</span>); <span class="comment">//结果为true</span></span><br><span class="line"><span class="comment">//        System.out.println(55 || 0); error ||两侧数据类型错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>短路与vs非短路与</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//短路与&amp;&amp; vs 非短路与&amp;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean flag = a&gt;b &amp;&amp; ++b&gt;c;//左边为假，右边短路了</span></span><br><span class="line"><span class="comment">//System.out.println(flag);//false</span></span><br><span class="line"><span class="comment">//System.out.println(b);//20</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> a&gt;b &amp; ++b&gt;c;<span class="comment">//右边不短路</span></span><br><span class="line">System.out.println(flag);<span class="comment">//false</span></span><br><span class="line">System.out.println(b);<span class="comment">//21</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>短路或 vs 非短路或</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//短路或|| vs 非短路|</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean flag = a&lt;b||++b&gt;c;//左边为真，右边短路了</span></span><br><span class="line"><span class="comment">//System.out.println(flag);//true</span></span><br><span class="line"><span class="comment">//System.out.println(b);//20</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> a&lt;b|++b&gt;c;<span class="comment">//右边不短路</span></span><br><span class="line">System.out.println(flag);<span class="comment">//true</span></span><br><span class="line">System.out.println(b);<span class="comment">//21</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>三目条件运算符的语法为：</p><p><strong>表达式1 ? 表达式2 : 表达式3</strong></p><p>int a&#x3D;3, b&#x3D;6;</p><p>int x &#x3D; a&gt;b? a:b;</p><p>那么计算结果就是x&#x3D;6。</p><p><strong>在三目条件运算中，表达式1和表达式2的值可以是任意一种基本数据类型。</strong></p><p><strong>数据类型 变量名 &#x3D; 布尔类型表达式？结果1：结果2</strong></p><p><strong>三元运算符计算方式：</strong><br>　　布尔类型表达式结果是true，三元运算符整体结果为结果1，赋值给变量。<br>　　布尔类型表达式结果是false，三元运算符整体结果为结果2，赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 三目条件运算符</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> a&lt;b?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> a&lt;b?<span class="string">&#x27;真&#x27;</span>:<span class="string">&#x27;假&#x27;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> a&lt;b?<span class="string">&quot;正确&quot;</span>:<span class="string">&quot;错误&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a&lt;b?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> a&lt;b?<span class="number">1.0</span>:<span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004233201050.png" class="" title="image-20221004233201050"><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>表达式通常由多个运算符组成。优先级的规则决定每个运算符在任何给定表达式中的计算顺序。表达式是按照从左到右运算符的优先级来进行运算的，正因为这种优先级的限制，才保证了每个表达式每次运算的结果都一样。</p><p>按操作数多少划分优先级</p><p>一元操作符 &gt; 二元操作符 &gt; 三元操作符</p><p>按运算类型划分优先级</p><p>算术运算符 &gt; 关系运算符 &gt; 逻辑运算符 &gt; 赋值运算符</p><p>尽量多的使用括号，括号优先级别最高，使用括号也可保证在不确定优先级的情况下，更好地控制语句的执行顺序。</p><img src="/2022/10/04/04-%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%B8%B8%E9%87%8F%EF%BC%88%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%89%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221004233454906.png" class="" title="image-20221004233454906"><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式是符合一定语法规则的运算符和运算数的序列。按照使用的运算符和运算结果的不同可以分为：</p><p>1.算术表达式</p><p>例如：(x+y-12)*100</p><p>2.关系表达式</p><p>例如：x&gt;y， x&gt;&#x3D;y， x!&#x3D;y， x&#x3D;&#x3D;y</p><p>3、逻辑表达式</p><p>例如：x&amp;&amp;y， x||y||z， (!x)&amp;&amp;(!y)</p><p>4、赋值表达式</p><p>例如：x&#x3D;y， x+&#x3D;y</p><p>关于表达式，有下面几个概念需要介绍。</p><p>表达式的值：对表达式中操作数进行运算得到的结果称为表达式的值；</p><p>表达式的类型：表达式值的数据类型即为表达式的类型；</p><p>表达式的运算顺序：应按照运算符的优先级从高到低的顺序进行，优先级相同的运算符按照事先约定的结合方向进行</p><p>表达式后面加上;，即为语句了。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-JavaHome&amp;临时环境变量&amp;classpath环境变量</title>
      <link href="/2022/10/04/03-JavaHome&amp;%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&amp;classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2022/10/04/03-JavaHome&amp;%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&amp;classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置java-home、临时环境变量信息"><a href="#1-配置java-home、临时环境变量信息" class="headerlink" title="1.配置java_home、临时环境变量信息"></a>1.配置java_home、临时环境变量信息</h1><p>PATH环境信息：</p><p>D:;</p><p>D:\JDK\JDK\bin;</p><p>D:\eclipse4.3\adt-bundle-windows-x86-20131030\adt-bundle-windows-x86-20131030\sdk\platform-tools;</p><p>C:\Program Files\Intel\iCLS Client;</p><p>%SystemRoot%\system32;</p><p>%SystemRoot%;</p><p>%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\OpenCL SDK\2.0\bin\x86;D:\mysql\bin;C:\Program Files\TortoiseSVN\bin;D:\firfox\quicktime\QTSystem\</p><p>目前path环境变量除了保存了我们自己配置的信息以外，还有系统自带的信息，如果一旦不不小心删除了path环境变量信息，那么就可能导致系统部分功能无法使用。</p><p>尽量避免修改的path环境变量信息。</p><p>如果我们需要频繁的更换jdk的版本，那么就需要频繁的去修改path环境变量内容了，就容易出错。</p><p>那么为了尽量避免频繁修改path环境变量，如何做？</p><p>解决办法：新建一个环境变量保存jdk安装目录会发生变化的部分，然后在path环境变量上引用新环境变量所保存的信息。</p><p>即使用java_home，当然这个环境变量不叫java_home也行，但是一般都起名为java_home。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image001.png" class="" title="img"><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image002.png" class="" title="img"><p>当jdk版本有变动的时候，去修改JAVA_HOME的值即可了。path环境变量就不用动了。</p><p>有的时候，某个jdk版本只用一次，那么可以使用临时配置环境变量即可。</p><p>需求： 在现实开发中有时候jdk版本的信息有时候只会使用一次或者几次就不再使用了，那么如果是这种需求，我们一般都是通过set命令配置临时环境变量。</p><p><strong>临时环境变量就是仅对于当前控制台窗口起作用，窗口一旦关闭，那么配置的临时环境变量信息会发生消失。</strong></p><p>set命令的用法：</p><p>​    </p><p>​    set              查看所有的环境变量信息。</p><p>​    set 环境变量的名字      查看指定的环境变量信息。</p><p>​    set 环境变量名字 &#x3D; 路径信息   设置指定的环境变量信息。</p><p>​    set 环境变量名字 &#x3D;       清空指定的环境变量信息。</p><p>​    <strong>set 环境变量名字 &#x3D; 新路径；%环境变量名字%  在原有的基础上添加新的路径信息。</strong></p><p>注意： 以后大家但凡看到是set命令设置的环境变量信息，都是临时环境变量信息。</p><p><strong>helloworld的小细节</strong></p><p>\1.  缺少main方法</p><p>出现提示：缺少一个名称为main的方法。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image004.png" class="" title="img"><p>\2.  源文件中的大小写要注意。初学者请牢记，第一个hello例子中只有     String和System中两个字符是大写的，其他的都小写。</p><p>\3.  配置path和classpath时，里面的路径是所有查找的目标的父目录，        而不是目标自己。</p><p>\4.  A.java.txt</p><p>​        文本文件默认是txt结尾的，注意要把隐藏已知文件类型扩展名去掉。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image006.png" class="" title="img"><p>\5.  大小写</p><p>只有类名Demo，String和System中三个个首字母是大写的。</p><p>  <strong>public</strong> <strong>class</strong> <strong>Demo</strong>{    <strong>public</strong> <strong>static</strong> <strong>void</strong>  main(<strong>String</strong>[] args) {      <strong>System</strong>.<em>out</em>.println(“hello  java”);    }  }  </p><p>\6.  path</p><p>看path环境变量配置 ，里面的路径是所有查找的目标的父目录，而不是目标自己。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image008.png" class="" title="img"><p><strong>7.</strong>  <strong>写错类名</strong>, <strong>源文件名不存在或者写错，或者当前路径错误。</strong></p><p><strong>类文件名写错，或者类文件不在当前路径下，或者不在classpath指定  路径下。</strong></p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image010.png" class="" title="img"><p><strong>java</strong>命令加载的是类，而不是<strong>class</strong>文件的。因此，如果人为的将<strong>class文件</strong>的文件名改成别的，那么java命令加载的时候，仍然需要写里面的类名，而不应该写<strong>class文件的文件名。</strong></p><p>\8.  javac 生成的.class 文件的名称取决于类名，跟.java名没有关系。</p><p><strong>javac编译源文件，生成的class文件的文件名默认就是类名。</strong></p><p>第一个hello world例子常见 的问题：</p><p>​    </p><p>​    \1. 找不到对应的文件</p><p>​       原因：</p><p>​           1 隐藏了后缀名，你的不是java文件是txt文件。</p><p>​           2.编译 的时候写错了文件名。</p><p>​    \2. 找不到或无法加载主类 Demo1 </p><p>​       原因： 运行的时候写错了类名. 注意： class文件的文件名是对应的类名的。不是对应的java文件名的。</p><p>​    \3. java的代码是严格区分大小写的。</p><p>​    </p><p>​    \4. ‘javac’ 不是内部或外部命令 </p><p>​       原因： 没有配置path环境变量信息，或者是配置错误了。</p><h1 id="2-classpath环境变量信息"><a href="#2-classpath环境变量信息" class="headerlink" title="2.classpath环境变量信息"></a>2.classpath环境变量信息</h1><p><strong>JVM查找类文件的顺序：</strong></p><p>•  <strong>如果没有配置classpath环境变量，JVM只在当前目录下查找要运行的类文件。</strong></p><p>•  <strong>如果配置了classpath环境，JVM会先在classpath环境变量值的目录中查找要运行的类文件。</strong></p><p>•  <strong>值的结尾处如果加上分号，那么JVM在classpath目录下没有找到要指定的类文件，会在当前目录下在查找一次。</strong></p><p>•  <strong>值的结尾出如果没有分号，那么JVM在classpath目录下没有找到要指定的类文件，不会在当前目录下查找，即使当前目录下有，也不会运行。</strong></p><p><strong>建议：配置classpath环境变量时，值的结尾处不要加分号，如果需要访问当前目录可以用 “.”表示。</strong></p><p>classpath 环境变量：</p><p>​    </p><p>​    设置了classpath环境变量的时候，启动jvm(java虚拟机)的时候，那么java虚拟机就会 根据classpath环境变量所保存路径信息下去寻找对应的class文件。</p><p>​    设置classpath环境变量信息的有分号与没有分号的区别： </p><p>​       \1. 如果配置classpath环境变量信息<strong>没有加上分号</strong>,那么java虚拟机仅会在classpath所保存的路径下去搜索对应的class文件，不会在当前路径下去搜索了。</p><p>​       \2. 如果配置classpath环境变量信息<strong>加上分号</strong>，那么java虚拟机除了会在classpath所保存的路径下去搜索对应 的class文件之外,如果能找到对应的class文件那么就马上指定对应的class文件，否则还会去 当前路径下去搜索。</p><p><strong>注意，分号;，就相当于是当前目录，就是那个点.。</strong></p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image011.png" class="" title="img"><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image012.png" class="" title="img"><p>现在E盘和F盘都有同名的Demo1.java文件，并且类名也相同，都是Demo1。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image013.png" class="" title="img"><p>当前F盘编译了Demo1.java，有对应的class文件。</p><p>此时由于设置了classpath，因此，首先会在classpath设置的目录去搜索Demo1的class文件的。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image014.png" class="" title="img"><p>如果将F盘的class文件删除了。</p><p>那么在classpath里面指定的f盘里找不到class文件，就在当前目录E盘下找。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image015.png" class="" title="img"><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image016.png" class="" title="img"><p>分号放前面了。分号，就相当于是当前路径。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image017.png" class="" title="img"><p>注意，不建议将classpath配置成永久环境变量的。</p><p>以前的书籍，都让配置classpath问永久环境变量。</p><p>jdk5官方也不建议配置classpath为永久环境变量了。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image018.png" class="" title="img"><p>如果这里配置了，然后最后又没有加上分号。</p><p>然后自己可能忘记了。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image019.png" class="" title="img"><p>在F盘执行，想要执行的是F盘的Demo1的，结果却执行了E盘的，原因就是上面配置了classpath导致的。因此，就会产生误解。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image020.png" class="" title="img"><p>将E盘的class文件删了。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image021.png" class="" title="img"><p>这就是由于配置了classpath&#x3D;E:\的原因。</p><p>因此，不推荐配置classpath为永久环境变量的。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image022.png" class="" title="img"><p>在jdk5.0之前，是必须要配置classpath的。原因是当时的jvm没有那么智能。</p><p><strong>jre&#x3D;jvm+核心类库。也就是jvm的运行要依赖核心类库的。</strong></p><p>jdk5.0之前，安装完的jdk之后，jvm不知道核心类库的位置。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image023.png" class="" title="img"><p>核心类库在这个目录下的。</p><p>因此，jdk5.0之前的jvm需要这些核心类库支持才能运行，但是又不能够智能的找到它们，因此，就强制要求必须要配置classpath环境变量，指向到这些核心类库的jar包。</p><img src="/2022/10/04/03-JavaHome&%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&classpath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/clip_image024.png" class="" title="img"><p>即要求要这样来配置。</p><p>而在jdk5.0之后的jvm比较智能了，能够自动的找到这些核心类库的jar包了，因此，不需要配置classpath指向到这些核心类库的jar包了。</p><p><strong>注意，配置classpath的作用，它对jvm有作用，同时它对编译的时候，也会产生作用的，因为编译的时候，遇到import导包的时候，就需要参考classpath指定的路径去找对应的包下的类的class文件。</strong></p><p>classpath环境变量</p><p>\1.  classpath的作用: 作用是<strong>指定类搜索路径</strong>，要使用已经编写好的类，前提当然是能够找到它们了，一旦配置了classpath路径信息的时候，jvm<strong>（java运行命令）</strong>与java编译器都会根据classpath指定的路径去寻找class文件。</p><p>\2.  如何设置当前目录（.）</p><p>set classpath&#x3D;.;设置路径 与 set classpath&#x3D;设置路径;.有什么区别?</p><p>“.”在前面的时候，java虚拟机会先从当前路径去寻找class文件，然后再到指定的路径去需找。如果”.”在后面，java虚拟机则会先寻找指定好的路径,然后再在当前的路径去寻找。</p><p><strong>设置classpath的时候要加上 ; 就会在当前目录下查找。因为分号就相当于是当前路径。</strong></p><p>\1.  简述对JVM,JRE,JDK的理解。</p><p>JVM: JAVA虚拟机</p><p>Jre： java运行环境 jre &#x3D; java虚拟机+ 核心类库</p><p>Jdk : java开发工具集。 Jdk &#x3D; jre + java开发工具。</p><p>\2.    简述环境变量path和java_home \ classpath的作用？</p><p>Path: 为了让控制台在任意路径下都可以找到java的开发工具。</p><p>Java_home : 避免频繁修改path 环境变量信息。</p><p>Classpath : 设置class文件所在的路径信息。</p><p>\3.    独立编写hello world程序，编译并运行。</p><p>\4.    java语言是否区分大小写? class的作用,javac,java的作用？</p><p> 是， class的作用定义一个该类 的关键字，</p><p> java :  启动java虚拟机解释并执行对应的class文件。</p><p>javac： 启动java编译器对指定的java源文件进行编译</p><p>\5. 简述main方法(是什么，什么特点，怎么用，何时用？)</p><p>​    程序的主入口，代码是从住方法上开始执行的。</p><p>​    写法是固定的。</p><p>​    定义一个类中使用。</p><p>​    如果一个类需要独立运行的时候，就需要main方法。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-命令行下运行Java代码</title>
      <link href="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="02-命令行下运行Java代码"><a href="#02-命令行下运行Java代码" class="headerlink" title="02-命令行下运行Java代码"></a><a href="https://www.cnblogs.com/Leo101018/p/13808541.html">02-命令行下运行Java代码</a></h1><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013133731413-1792118278.png" class="" title="img"><p>这里如果报错，说明环境变量PATH没有配置。</p><p>如果没有配置PATH环境变量，仍然想要执行javac命令，那么就需切换到javac命令目录下去执行。</p><p>当执行一个程序的时候，首先在当前目录下查找是否有这个程序，如果没有，那么就去path环境变量下查找，以找到的第一个为准，也就是在path下有多个这个程序，但是找到了第一个就停止往后找了。<br>如果都没找到，那么就会报错了。</p><p>查看环境变量内容</p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013133951044-759302803.png" class="" title="img"><p>命令行下设置环境变量PATH内容</p><p>set path&#x3D;jdk路径\bin</p><p>注意，配置到bin目录。</p><p>命令行下配置，退出cmd，即失效，永久配置到环境变量配置文件中进行配置。</p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013134400039-1428974611.png" class="" title="img"><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013134445937-977223770.png" class="" title="img"><p> 注意，这里配置JAVA_HOME环境变量，然后通过该环境变量再去指定到bin目录，目的是不用去频繁的更改PATH环境变量，方式修改错误。如果jdk变换其他版本了，只需要更改JAVA_HOME环境变量即可。</p><p>编写测试java文件</p><p>[</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Hello</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Welcome</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[</p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013134851725-1447593978.png" class="" title="img"><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013134927582-528866572.png" class="" title="img"><p><strong>注意：编译的时候，对于文件名的大小写是不敏感的。</strong></p><p><strong>在Java的源文件中可以写入多个类，但是编译之后，每个类会单独生成一个字节码文件（class文件）。</strong></p><p>当有很多的class文件的时候，给别人提供使用是不方便的，因此，可以将多个class文件进行打包，jar文件。</p><p>可以使用jar cvf xxx.jar Hello.class Welcome.class方式打包。</p><p>通常打包操作可通过IDE完成。</p><p>[</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Hello</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Welcome</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[</p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013135517652-212396672.png" class="" title="img"><p><strong>当在一个源文件中定义了一个public的类，那么这个源文件的文件名必须取名为这个public类的类名。java中的规定。</strong><br><strong>因此，在一个源文件中，有且只能有一个public的类。也可以没有public的类，那么文件名可以是任意类的类名或者是其它的名字。</strong></p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013135719935-1988852445.png" class="" title="img"><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013135758658-1222200341.png" class="" title="img"><p><strong>编译的时候，可以没有main函数，但是要想执行，必须有main函数。否则执行错误。</strong></p><p><strong>另外，java解释器，解释执行的时候，加载的是一个类，而不是一个文件，不是welcome.class这个文件。而是Welcome这个类。</strong></p><p> <strong>java解释器要加载这个类，因此，后面的这个类名是大小写相关的。</strong></p><p> <strong>注意，main函数必须是public static void的。java Welcome加载类的过程为，首先根据这个名字找到对应的</strong></p><p><strong>class文件，即找到Welcome.class文件，然后jvm将该文件加载入内存的方法区（代码区）中，然后将class文件解</strong></p><p><strong>开，然后搜寻找到public static void的main函数，然后将该main函数加载到方法调用栈上进行执行。</strong></p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013140208913-1985116180.png" class="" title="img"><p>第一次运行java Welcome没有报错，原因是，在Welcome.class目录下运行，能够找到对应文件。</p><p>第二次运行java Welcome报错，原因是，当前目录下没有Welcome.class文件了，且classpath环境变量没有配置，所以找不到类文件。</p><p><strong>当定义了classpath之后，那么java解释器在加载一个类的时候，就会完全根据classpath定义的路径去搜索要加载的类。而不会去看是否当前目录下有这个class文件。</strong></p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/2170368-20201013140611958-1418112487.png" class="" title="img"><p><strong>可以看到，java解释器加载类的时候，当定义了classpath的时候，是完全按照定义的classpath指定的路径去搜寻的，而不会在当前路径下查找了。即使当前路径下有这个类，也不会找到。</strong><br><strong>为了让当前路径下的类也能找到，那么classpath中添加当前路径‘.’即可。</strong></p><p>为了配置的classpath永久生效，也需要配置到环境变量中去。</p><p>因此，需要配置两个环境变量：</p><p>path和classpath。</p><p><strong>安装jdk的路径要注意： 不能带有中文路径或者是空格。</strong></p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/image-20221004165803557.png" class="" title="image-20221004165803557"><p>安装过程中，先安装jdk，然后又会提示你安装jre，实际上这个jre完全可以不安装，因为前面安装的jdk已经包含了jre了。</p><p>jdk目录的介绍：</p><p>​    bin: 存放的是java的开发工具。   </p><p>​    db : JDK7附带的一个轻量级的数据库，名字叫做Derby。</p><p>​    include ：存放的调用系统资源的接口文件。java程序中向os调用的时候，需要的本地os接口文件。</p><p>​    jre ： java运行环境</p><p>​    lib : 核心类库。</p><p>​    src.zip : java源代码</p><p>java.exe 启动java虚拟机解释并执行指定的class文件。</p><p>​     java工具的使用格式：</p><p>​            java 指定的class文件</p><p> javac.exe 启动java编译器对指定的java源文件进行编译。</p><p>编写第一个java的程序：</p><p>​    第一步： 新建一个txt文件。把后缀名改成java。</p><p>​    第二步： <strong>java 代码全部都是写到类上面的。也就是在java中，类是程序组织的最小单位。</strong></p><p>​       如何编写一个类：</p><p>​           使用一个关键字class即可定义个类。</p><p>​       格式：</p><p>​           class 类名{</p><p>​           } 备注： 大括号表示是一个类的范围，在类的范围之内都可以写代码，</p><p>​    <strong>第三步： 编写一个主方法。 主方法的写法是固定的，是一个程序的入口，代码从主方法开始执行</strong></p><p> 当直接双击一个可执行文件一闪而过就关闭了，那么一般说明，这个可执行文件需要一个控制台中来执行它。</p><p>如何启动java编译对java的源文件进行编译？</p><p>​    javac的使用格式：</p><p>​       javac java源文件。   </p><p> 编译的过程中我们就面临 的问题：每次编译的时候都需要写上java源文件的完整路径。 烦！！！</p><p>即需要在javac可执行文件的目录下，执行”javac java源文件完整路径”</p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/image-20221004170158393.png" class="" title="image-20221004170158393"><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/image-20221004170206872.png" class="" title="image-20221004170206872"><p>这样是不好的，将源文件放到了javac的安装目录了，不好。乱。</p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/image-20221004170232725.png" class="" title="image-20221004170232725"><p>每次都需要写全路径，麻烦。</p><p><strong>解决方案： 如果可以在任意的路径下都可以找到java的开发工具，那么该问题就解决了。</strong></p><p><strong>在控制台写一个可执行文件的文件名，然后能够执行的原理：</strong></p><p>​    在控制台写一个可执行文件的文件名,那么系统<strong>首先会在控制台当前路径下去搜索是否存在该文件</strong>，如果可以找到指定的文件，那么就执行该文件，如果找不到该文件，那么系统还会根据<strong>path</strong>的环境变量所保存的路径信息下去搜索是否有指定的文件，如果能找到，那么就执行该文件。</p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/clip_image001.png" class="" title="img"><p>SystemRoot是Windows系统的根路径。</p><img src="/2022/10/04/02-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81/clip_image001-1664874219008-26.png" class="" title="img"><p>即这个目录。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对硬盘大于2TB，centos7系统安装问题说明</title>
      <link href="/2022/10/04/%E9%92%88%E5%AF%B9%E7%A1%AC%E7%9B%98%E5%A4%A7%E4%BA%8E2TB%EF%BC%8Ccentos7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/"/>
      <url>/2022/10/04/%E9%92%88%E5%AF%B9%E7%A1%AC%E7%9B%98%E5%A4%A7%E4%BA%8E2TB%EF%BC%8Ccentos7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="针对硬盘大于2TB，centos7系统安装问题说明"><a href="#针对硬盘大于2TB，centos7系统安装问题说明" class="headerlink" title="针对硬盘大于2TB，centos7系统安装问题说明"></a><a href="https://www.cnblogs.com/Leo101018/p/13806461.html">针对硬盘大于2TB，centos7系统安装问题说明</a></h1><p>硬盘分区常见类型：</p><p>msdos（mbr分区）</p><p>gpt（gpt分区）</p><p>系统安装默认采用mbr分区。</p><p>MBR分区表(即主引导记录) 最大只支持2TB的分区，最多只支持4个主分区或3个主分区加一个扩展分区，信息只存储在一个区域；GPT（即GUID分区表），是源自EFI标准的一种较新的磁盘分区表结构的标准，是未来磁盘分区的主要形式，与MBR分区方式相比，突破4个主分区限制，每个磁盘最多支持128个分区，支持大于2T的分区，最大卷可达 18EB，信息存储在多个区域，当一部分受损后可修复。</p><p>设置GPT方式有UEFI和BIOS两种方式，UEFI启动是一种新的主板引导项，与传统的Bios方式相比可以提高开机后操作系统的启动速度。如今很多主板已经直接支持UEFI，这种场景下可以直接通过UEFI的方式设置GPT方式，如若主板不支持，那么还得通过传统的Bios方式强制设置GPT方式。</p><p>针对uefi启动，采用gpt分区，需要单独划分一个uefi分区</p><img src="/2022/10/04/%E9%92%88%E5%AF%B9%E7%A1%AC%E7%9B%98%E5%A4%A7%E4%BA%8E2TB%EF%BC%8Ccentos7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/970770-20200929110620548-1970820754.png" class="" title="img"><p>针对bios启动，mbr方式分区大于2TB硬盘会报错，如下</p><img src="/2022/10/04/%E9%92%88%E5%AF%B9%E7%A1%AC%E7%9B%98%E5%A4%A7%E4%BA%8E2TB%EF%BC%8Ccentos7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/970770-20200929111340979-1715145746.png" class="" title="img"><p> 此时bios启动安装时，输入inst.gpt强制采用gpt分区（实际这不不做也没关系）</p><img src="/2022/10/04/%E9%92%88%E5%AF%B9%E7%A1%AC%E7%9B%98%E5%A4%A7%E4%BA%8E2TB%EF%BC%8Ccentos7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/970770-20200929111451537-931922777.png" class="" title="img"><p>进入到分区页面</p><img src="/2022/10/04/%E9%92%88%E5%AF%B9%E7%A1%AC%E7%9B%98%E5%A4%A7%E4%BA%8E2TB%EF%BC%8Ccentos7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/970770-20200929111945993-147036960.png" class="" title="img"><p>关键需要划分bios boot分区，其它分区正常划分即可。</p><p>投机方式：将所有分区删除，点击standard标准分区，点击自动划分分区，就会自动将bios boot分区划分好，之后将其它不用分区删除，按照自己规划进行划分即可。</p><p>注意，bios boot分区必须是标准分区，文件系统为bios boot，否则会报错。</p><p>后续正常安装即可。</p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos-install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows配置为openssh服务端可远程登录</title>
      <link href="/2022/10/04/windows%E9%85%8D%E7%BD%AE%E4%B8%BAopenssh%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%AF%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
      <url>/2022/10/04/windows%E9%85%8D%E7%BD%AE%E4%B8%BAopenssh%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%AF%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>windows的openssh服务端</p><p><a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a></p><p>配置方式如下：</p><p>下载安装包，32位或64位，解压，放置在任意目录。</p><img src="/2022/10/04/windows%E9%85%8D%E7%BD%AE%E4%B8%BAopenssh%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%AF%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/970770-20200922123950524-1846829508.png" class="" title="img"><p>右键-使用powershell运行</p><img src="/2022/10/04/windows%E9%85%8D%E7%BD%AE%E4%B8%BAopenssh%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%AF%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/970770-20200922124036665-1851354777.png" class="" title="img"><p>将openssh ssh server设置为自动启动即可。</p><img src="/2022/10/04/windows%E9%85%8D%E7%BD%AE%E4%B8%BAopenssh%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%AF%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/970770-20200922124117194-664861249.png" class="" title="img"><p>如想卸载，右键-powershell运行uninstall-sshd.ps1即可。</p><p>ps：如右键-powershell运行报错，“无法加载文件….，因为在系统中进制执行脚本”。则执行如下操作即可。</p><p>使用管理员身份打开powershell</p><p>执行set-ExecutionPolicy RemoteSigned</p><p>之后，脚本即可正常运行。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-JavaSE入门、JDK的下载与安装、第一个Java程序、Java程序的编译与执行</title>
      <link href="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/"/>
      <url>/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="01-JavaSE入门、JDK的下载与安装、第一个Java程序、Java程序的编译与执行"><a href="#01-JavaSE入门、JDK的下载与安装、第一个Java程序、Java程序的编译与执行" class="headerlink" title="01-JavaSE入门、JDK的下载与安装、第一个Java程序、Java程序的编译与执行"></a>01-JavaSE入门、JDK的下载与安装、第一个Java程序、Java程序的编译与执行</h1><h2 id="Java的发展历史"><a href="#Java的发展历史" class="headerlink" title="Java的发展历史"></a>Java的发展历史</h2><p>Java是一种面向对象的程序设计语言，由Sun Microsystems公司的James Gosling等人于20世纪90年代初开发。它最初被命名为Oak，用来开发消费类电子产品，解决诸如电话、电视机等家用电器的控制和通讯问题。后来随着互联网的发展，Sun看到了Oak在计算机网络上的广阔应用前景，于是改造了Oak，在1995年5月正式命名为”Java”，变化历程如下图1.1和1.2所示。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image001.png" class=""><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image002.png" class="" title="img"><h2 id="Java语言的版本"><a href="#Java语言的版本" class="headerlink" title="Java语言的版本"></a>Java语言的版本</h2><p><strong>JavaSE</strong></p><p>　　 Java SE（Java Platform，Standard Edition）。Java SE 以前称为J2SE。它允许开发和部署在<a href="http://baike.baidu.com/view/79807.htm">桌面</a>、<a href="http://baike.baidu.com/view/899.htm">服务器</a>、嵌入式环境和实时环境中使用的Java <a href="http://baike.baidu.com/view/330120.htm">应用程序</a>。Java SE 包含了支持Java Web 服务开发的类，并为Java Platform，Enterprise Edition（Java EE）提供基础。<br>    例子：类似QQ、扫雷、飞秋、凌波这样子的桌面应用。</p><p><strong>Java EE</strong></p><p>　　 Java EE（Java Platform，Enterprise Edition）。这个版本以前称为J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在Java SE 的基础上构建的，它提供Web 服务、<a href="http://baike.baidu.com/view/3852154.htm">组件模型</a>、管理和通信API，可以用来实现企业级的面向服务<a href="http://baike.baidu.com/view/1188494.htm">体系结构</a>（service-oriented architecture，SOA）和Web 2.0 应用程序。 </p><p><strong>Java ME</strong></p><p>　　 Java ME（Java Platform，Micro Edition）。这个版本以前称为J2ME，也叫<a href="http://baike.baidu.com/view/412221.htm">K-JAVA</a>。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视<a href="http://baike.baidu.com/view/16791.htm">机顶盒</a>和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以<a href="http://baike.baidu.com/view/31294.htm">动态</a>下载的连网和离线应用程序的丰富支持。基于Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。</p><h2 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h2><p><strong>1.跨平台</strong></p><p>何谓平台：即一套特定的硬件再加上运行其上的操作系统，即硬件＋软件。</p><p>Java编译器将Java源程序编译成一种与体系结构无关的中间文件格式，称为字节码。只要有Java运行系统的机器都能执行这种中间代码。从而使同一版本的应用程序可以运行在不同的平台上。</p><p>怎样理解平台无关性呢？JVM (java Virtual Machine)起到了主要作用。JVM是运行在平台之上的程序，它能够虚拟出一台目标机，所有字节码就是在虚拟出的目标机上运行。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image004.jpg" class="" title="img"><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image002-1664876304333-1.png" class="" title="img"><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/image-20221004173848525.png" class="" title="image-20221004173848525"><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/image-20221004173904530.png" class="" title="image-20221004173904530"><p>110是Windows上的指令。</p><p>101是linux上的指令。</p><p><strong>Java跨平台</strong></p><p>“write once run anywhere”</p><p>Java的跨平台是相对于其他编程语言而言的，通过Java语言编写的应用程序在不同的系统平台上都可以运行。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。在windows编译的c语言程序，在linux下是不能运行的，想要在linux下运行，那么就需要将c语言程序源码在linux平台上重新编译成linux平台的目标代码才行。当然在linux下编译的c语言程序在windows下也是不能运行的。<strong>而Java语言在不同平台上运行时不需要重新编译。</strong></p><p>Java跨平台的原理：Java的跨平台是通过Java虚拟机（JVM）来实现的。</p><p><strong>2.半编译半解释</strong></p><p>源程序先编译成字节码，Java解释器(运行系统)能直接对Java字节码进行解释执行。链接程序通常比编译程序所需资源少，Java的编译和解释执行过程如下图1.4所示。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image005.png" class="" title="img"><p><strong>3.简单</strong></p><p>Java是个精简的系统，无需强大的硬件环境便可以很好地运行。Java的风格和语法类似于C++，因此，C++程序员可以很快就掌握Java编程技术。Java摒弃了C++中容易引发程序错误的地方，如多重继承、运算符重载、指针和内存管理等，Java语言具有支持多线程、自动垃圾收集和采用引用等特性。Java提供了丰富的类库，方便用户迅速掌握Java。</p><p><strong>4.面向对象</strong></p><p>对象可以是人们研究的任何实体，小到一个原子大到整个宇宙，均可看作对象，它不仅能表示具体的事物，还能表示抽象的规则、概念等。对象之间通过消息相互作用，用公式表示，面向对象编程语言可以表示为：程序&#x3D;对象+消息。现实世界中的对象均有属性和行为，映射到计算机程序上，属性就表示对象的数据（用来表示对象的状态），行为就表示对象的方法（用来处理数据或同外界交互）。</p><p>所有面向对象编程语言都支持三个概念：封装、继承和多态，Java也不例外。</p><p>面向对象可以说是Java最基本的特性。Java语言的设计完全是面向对象的，它不支持类似C语言那样的面向过程的程序设计技术。所有的Java程序和applet均是对象，Java支持静态和动态风格的代码继承及重用。</p><p><strong>5.分布式</strong></p><p>Java包括一个支持HTTP和FTP等基于TCP&#x2F;IP协议的子库。因此，Java应用程序可凭借URL打开并访问网络上的对象，就像访问本地文件一样简单方便。Java的分布性为实现在分布环境尤其是Internet下实现动态内容提供了技术途径。</p><p><strong>6.健壮</strong></p><p>Java提供了自动垃圾收集机制来进行内存管理，并检测程序对内存的访问，确定合法并不会引起任何问题后，才允许访问。</p><p>Java还提供了异常处理机制用来检查编译及运行时可能出现的问题，Java在编译和运行程序时要对可能出现的异常进行检查；同时，Java在编译时还可捕获类型声明中的许多常见错误，帮助程序员消除错误，防止系统崩溃。</p><p><strong>7、安全</strong></p><p>作为网络语言，安全是非常重要的。Java的安全性可从两个方面得到保证。一方面，在Java语言里，像指针和释放内存等C++功能被删除，避免了非法内存操作。另一方面，当Java用来创建浏览器时，语言功能和一类浏览器本身提供的功能结合起来，使它更安全。Java语言在你的机器上执行前，要经过很多次的测试。它经过代码校验，检查代码段的格式，检测指针操作，试图改变一个对象的类型。另外，Java拥有多个层次的互锁保护措施，能有效地防止病毒的入侵和破坏行为的发生。Java不支持指针，避免了由于指针操作所引起的错误和非法入侵。同时，Java在运行应用程序时，严格检查其访问数据的权限，保证数据的可靠性。</p><p><strong>8.多线程</strong></p><p>线程有时也称小进程，是一个大进程里分出来的小的独立运行的基本单位。Java提供的多线程功能使得在一个程序里可同时执行多个小任务，即同时进行不同的操作或处理不同的事件。多线程带来的更大的好处是具有更好的网上交互性能和实时控制性能，尤其是实现多媒体功能。</p><h2 id="Java开发环境的搭建"><a href="#Java开发环境的搭建" class="headerlink" title="Java开发环境的搭建"></a>Java开发环境的搭建</h2><p>Java运行环境就是JRE (Java Runtime Environment），是由Sun所研发的，是一个软件, JRE可以让计算机系统执行Java应用程序，它是运行JAVA程序所必须的环境的集合，JRE的内部有一个JAVA虚拟机（Java Virtual Machine，JVM）以及一些标准的类库（Class Library），如果你只需要运行Java程序,下载并安装它即可。</p><p>如果你要自行开发 Java软件，请下载JDK。在JDK中附带有JRE。最新版本下载地址<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html%E3%80%82">http://www.oracle.com/technetwork/java/javase/downloads/index.html。</a></p><p>java的环境的搭建：</p><p>​    </p><p>​    <strong>jre: java运行环境。 jre &#x3D; java虚拟机 + 核心类库(辅助java虚拟机运行的文件)</strong></p><p>​    </p><p>​    <strong>jdk： java开发工具集  jdk &#x3D; jre + java开发工具。</strong></p><p>java开发工具，例如，javac编译工具，java解释器执行工具。</p><p>如果只是软件使用者，那么安装jre即可，提供运行环境。</p><p>如果是软件开发者，那么就需要安装jdk。因为需要开发工具。</p><p>JRE Java Runtime Environment Java运行环境。包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p><p>JDK 是整个Java的核心，包括了Java运行环境、Java工具和Java基础类库。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/image-20221004174307304.png" class="" title="image-20221004174307304"><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/image-20221004174351709.png" class="" title="image-20221004174351709"><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image006.png" class="" title="img"><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image007.png" class="" title="img"><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image008.png" class="" title="img"><h2 id="Java程序运行的原理"><a href="#Java程序运行的原理" class="headerlink" title="Java程序运行的原理"></a>Java程序运行的原理</h2><p>Java程序运行在Java虚拟机上，Java虚拟机就是指JVM (Java Virtual Machine) ，这是一个虚构出来的计算机，通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机有自己完善的硬件架构,如处理器、堆栈、寄存器等,还具有相应的指令系统，编辑、编译及运行Java程序的过程如图1.13所示。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image009.png" class="" title="img"><p><strong>图1.13编辑、编译及运行Java程序的过程</strong></p><p>一个运行时的Java虚拟机实例的天职就是：负责运行一个Java程序。Java虚拟机的主要任务是装载class文件并且解释执行其中的字节码。当启动一个Java程序时，一个虚拟机实例也就诞生了。当该程序关闭退出，这个虚拟机实例也就随之消亡。如果同一台计算机上同时运行三个Java程序，将得到三个Java虚拟机实例。每个Java程序都运行于它自己的Java虚拟机实例中，如下图1.14所示。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image010.png" class="" title="img"><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image011.png" class="" title="img"><p><strong>图 运行时过程</strong></p><p>编译源文件：java源代码被java编译器编译（Compile)。如果这时产生错误，我们称为编译错误。如果没有错误，则生成字节码（byte code）。</p><p>运行字节码：这里，java字节码被装载到java虚拟机中，解释成本地代码再运行。如果此时产生错误，我们称之为运行时错误（Runtime）。</p><h2 id="注释的使用"><a href="#注释的使用" class="headerlink" title="注释的使用"></a>注释的使用</h2><p>Java 的注释是被Javac忽略的部分，Java中的注释包含下面三种。</p><p>1．单行注释</p><p>&#x2F;&#x2F; 单行注释</p><p>2．多行注释</p><p>&#x2F;* 多行注释 *&#x2F;</p><p>3．文档注释</p><p>&#x2F;** 文档注释 *&#x2F;</p><p>Java的注释如下图1.17所示。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image012.png" class="" title="img"><p>Java中的修饰符如下图1.19所示，其中public用来修饰类，也可以修饰方法，static用来修饰main方法，void是main方法的返回值类型，表示此方法没有返回值。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image013.png" class="" title="img"><h2 id="类和主方法"><a href="#类和主方法" class="headerlink" title="类和主方法"></a>类和主方法</h2><p>Java中的类和主方法的结构图下图1.20所示，主方法在类的内部，类里包含方法。</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image014.png" class="" title="img"><hr><p>Java跨平台性是通过JVM（Java虚拟机）来实现的。</p><p>JVM是不具有跨平台性的，针对不同的平台分别设计了对应的JVM。通过不同平台的JVM来实现了Java程序的跨平台性。也就是通过JVM的不跨平台性来支持Java程序的跨平台性。</p><p>Java代码的执行：</p><p>编译：Java源码通过javac命令编译成class字节码文件。</p><p>解释执行：class字节码文件通过java命令解释执行。</p><p>Java源码-&gt;编译-&gt;class字节码文件-&gt;解释器解释执行</p><p>注意，class字节码文件是与特定硬件平台无关的中间代码，从而实现了在不同平台上的JVM上的解释执行，实现跨平台性。</p><p> Java字节码的两种执行方式：</p><p>即时编译：解释器（JVM）将字节码编译成对应硬件平台的机器码（二进制指令），然后再在该平台上直接执行该机器码，速度快，效率高。</p><p>解释执行：解释器每次解释并执行字节码中的一小段代码，从而实现字节码的执行。</p><p> Java程序执行与C&#x2F;C++程序执行对比：</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image015.png" class="" title="img"><p>JVM相当于80x86计算机。</p><p>JVM中的Java解释器相当于80x86 CPU。</p><p>在80x86 CPU上运行的是C&#x2F;C++源码编译之后的机器码，在JVM解释器上运行的是Java源码编译之后的字节码。</p><p>当前不是所有平台都提供了JVM的，因此，Java代码只能在已经实现了JVM软件的并且安装了JVM软件的平台上运行。</p><p>javac命令就是java编译器。</p><p>java命令就是java解释器。利用解释器去装载字节码的时候，会自动的启动jvm虚拟机。使字节码在jvm内部运行。</p><p>Java源文件编译过程：</p><p>Java应用程序的开发周期包括编译、下载、解释和执行几个部分。Java编译程序将Java源程序翻译为JVM可执行代码—字节码。这一编译过程同C&#x2F;C++的编译有些不同。当C编译器编译生成一个对象的代码时，该代码是为在某一特定硬件平台运行而产生的。因此，在编译过程中，编译程序通过查表将所有对符号的引用转换为特定的内存偏移量，以保证程序运行。Java编译器却不将对变量和方法的引用编译为数值引用，也不确定程序执行过程中的内存布局，而是将这些符号引用信息保留在字节码中，由解释器在运行过程中创建内存布局，然后再通过查表来确定一个方法所在的地址。这样就有效的保证了Java的可移植性和安全性。</p><p>解释器解释执行分为3步：</p><p>代码的装入、代码的校验、代码的执行。</p><p>运行JVM字节码的工作是由解释器来完成的。解释执行过程分三步进行：代码的装入、代码的校验和代码的执行。装入代码的工作由“类装载器”（class loader）完成。类装载器负责装入运行一个程序需要的所有代码，这也包括程序代码中的类所继承的类和被其调用的类。当类装载器装入一个类时，该类被放在自己的名字空间中。除了通过符号引用自己名字空间以外的类，类之间没有其他办法可以影响其它类。在本台计算机上的所有类都在同一地址空间内，而所有从外部引进的类，都有一个自己独立的名字空间。这使得本地类通过共享相同的名字空间获得较高的运行效率，同时又保证它们与从外部引进的类不会相互影响。当装入了运行程序需要的所有类后，解释器便可确定整个可执行程序的内存布局。解释器为符号引用同特定的地址空间建立对应关系及查询表。通过在这一阶段确定代码的内存布局，Java很好地解决了由超类改变而使子类崩溃的问题，同时也防止了代码对地址的非法访问。</p><p>随后，被装入的代码由字节码校验器进行检查。校验器可发现操作数栈溢出，非法数据类型转换等多种错误。通过校验后，代码便开始执行了。</p><p>Java基础类库，都内置在jdk中。</p><p>demo目录是提供的一些例子程序。</p><p> lib目录就是提供的一些基础类库。</p><p> jre目录就是运行时环境。</p><p><strong>linux&#x2F;unix</strong>下，换行是一个字符来表示的，ascII表示就是10。</p><p><strong>windows</strong>下，换行是两个字符来表示，实际是回车+换行，ascII表示就是13和10。来表示一个回车+换行。</p><p><strong>Java</strong>中所有功能都需要通过类来完成，也就是说Java中最小组织单位就是类。</p><p><strong>JDK</strong>、JRE、JVM关系示意图</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image017.jpg" class="" title="img"><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image019.png" class="" title="https:&#x2F;&#x2F;img2020.cnblogs.com&#x2F;blog&#x2F;2170368&#x2F;202010&#x2F;2170368-20201013143113378-1314191418.png"><p>JRE (Java Runtime Environment) ：是Java程序的运行时环境，包含 JVM 和运行时所需要的 核心类库 。<br> JDK (Java Development Kit)：是Java程序开发工具包，包含 JRE 和开发人员使用的工具。<br> 我们想要运行一个已有的Java程序，那么只需安装 JRE 即可。<br> 我们想要开发一个全新的Java程序，那么必须安装 JDK 。</p><p>三者关系： JDK &gt; JRE &gt; JVM</p><img src="/2022/09/29/01-JavaSE%E5%85%A5%E9%97%A8%E3%80%81JDK%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E3%80%81Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E6%89%A7%E8%A1%8C/clip_image021.jpg" class="" title="img"><p>Java程序的执行过程</p><p>所有的Java代码，其后缀都是以java结尾，Java程序的执行过程分为两步：</p><p>\1. 编译</p><p>\2. 执行</p><p>Class文件是字节码文件，程序最终执行的就是这个字节码（bytecode）文件。</p><p>编译命令：java Hello.java</p><p>执行命令：java Hello（注意，Test后面没有.class）</p><p><strong>注意，加载的是类，而不是class字节码文件。执行的流程就是首先根据java命令后面的要加载的类的名字来找到对应的名字的class文件，然后JVM会将class文件加载到内存的方法区中，然后将class文件解开，就会找到里面对应的那个类，然后就可以加载这个类进行运行。</strong></p><p>Java是跨平台的语言，真正执行的不是二进制代码，而是字节码。</p><p>JVM（Java Virtual Machine，Java虚拟机）</p><p>Java是跨平台的，而JVM不是跨平台的（JVM是由C语言编写的）</p><p>Java之所以能够做到跨平台，本质原因在于JVM不是跨平台的。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
